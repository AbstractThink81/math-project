import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "ParabolaWidget.h"
        name: "ParabolaWidget"
        accessSemantics: "reference"
        prototype: "QWidget"
        exports: ["mathProject/ParabolaWidget 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "minX"
            type: "int"
            read: "minX"
            write: "setMinX"
            notify: "updateDisplay"
            index: 0
        }
        Property {
            name: "maxX"
            type: "int"
            read: "maxX"
            write: "setMaxX"
            notify: "updateDisplay"
            index: 1
        }
        Property {
            name: "minY"
            type: "int"
            read: "minY"
            write: "setMinY"
            notify: "updateDisplay"
            index: 2
        }
        Property {
            name: "maxY"
            type: "int"
            read: "maxY"
            write: "setMaxY"
            notify: "updateDisplay"
            index: 3
        }
        Method {
            name: "setDisplay"
            Parameter { name: "minX"; type: "int" }
            Parameter { name: "maxX"; type: "int" }
            Parameter { name: "minY"; type: "int" }
            Parameter { name: "maxY"; type: "int" }
        }
    }
    Component {
        file: "qwidget.h"
        name: "QWidget"
        accessSemantics: "reference"
        prototype: "QObject"
        Property { name: "modal"; type: "bool"; read: "isModal"; index: 0; isReadonly: true }
        Property {
            name: "windowModality"
            type: "Qt::WindowModality"
            read: "windowModality"
            write: "setWindowModality"
            index: 1
        }
        Property { name: "enabled"; type: "bool"; read: "isEnabled"; write: "setEnabled"; index: 2 }
        Property { name: "geometry"; type: "QRect"; read: "geometry"; write: "setGeometry"; index: 3 }
        Property { name: "frameGeometry"; type: "QRect"; read: "frameGeometry"; index: 4; isReadonly: true }
        Property {
            name: "normalGeometry"
            type: "QRect"
            read: "normalGeometry"
            index: 5
            isReadonly: true
        }
        Property { name: "x"; type: "int"; read: "x"; index: 6; isReadonly: true }
        Property { name: "y"; type: "int"; read: "y"; index: 7; isReadonly: true }
        Property { name: "pos"; type: "QPoint"; read: "pos"; write: "move"; index: 8 }
        Property { name: "frameSize"; type: "QSize"; read: "frameSize"; index: 9; isReadonly: true }
        Property { name: "size"; type: "QSize"; read: "size"; write: "resize"; index: 10 }
        Property { name: "width"; type: "int"; read: "width"; index: 11; isReadonly: true }
        Property { name: "height"; type: "int"; read: "height"; index: 12; isReadonly: true }
        Property { name: "rect"; type: "QRect"; read: "rect"; index: 13; isReadonly: true }
        Property { name: "childrenRect"; type: "QRect"; read: "childrenRect"; index: 14; isReadonly: true }
        Property {
            name: "childrenRegion"
            type: "QRegion"
            read: "childrenRegion"
            index: 15
            isReadonly: true
        }
        Property {
            name: "sizePolicy"
            type: "QSizePolicy"
            read: "sizePolicy"
            write: "setSizePolicy"
            index: 16
        }
        Property {
            name: "minimumSize"
            type: "QSize"
            read: "minimumSize"
            write: "setMinimumSize"
            index: 17
        }
        Property {
            name: "maximumSize"
            type: "QSize"
            read: "maximumSize"
            write: "setMaximumSize"
            index: 18
        }
        Property {
            name: "minimumWidth"
            type: "int"
            read: "minimumWidth"
            write: "setMinimumWidth"
            index: 19
        }
        Property {
            name: "minimumHeight"
            type: "int"
            read: "minimumHeight"
            write: "setMinimumHeight"
            index: 20
        }
        Property {
            name: "maximumWidth"
            type: "int"
            read: "maximumWidth"
            write: "setMaximumWidth"
            index: 21
        }
        Property {
            name: "maximumHeight"
            type: "int"
            read: "maximumHeight"
            write: "setMaximumHeight"
            index: 22
        }
        Property {
            name: "sizeIncrement"
            type: "QSize"
            read: "sizeIncrement"
            write: "setSizeIncrement"
            index: 23
        }
        Property { name: "baseSize"; type: "QSize"; read: "baseSize"; write: "setBaseSize"; index: 24 }
        Property { name: "palette"; type: "QPalette"; read: "palette"; write: "setPalette"; index: 25 }
        Property { name: "font"; type: "QFont"; read: "font"; write: "setFont"; index: 26 }
        Property {
            name: "cursor"
            type: "QCursor"
            read: "cursor"
            write: "setCursor"
            reset: "unsetCursor"
            index: 27
        }
        Property {
            name: "mouseTracking"
            type: "bool"
            read: "hasMouseTracking"
            write: "setMouseTracking"
            index: 28
        }
        Property {
            name: "tabletTracking"
            type: "bool"
            read: "hasTabletTracking"
            write: "setTabletTracking"
            index: 29
        }
        Property {
            name: "isActiveWindow"
            type: "bool"
            read: "isActiveWindow"
            index: 30
            isReadonly: true
        }
        Property {
            name: "focusPolicy"
            type: "Qt::FocusPolicy"
            read: "focusPolicy"
            write: "setFocusPolicy"
            index: 31
        }
        Property { name: "focus"; type: "bool"; read: "hasFocus"; index: 32; isReadonly: true }
        Property {
            name: "contextMenuPolicy"
            type: "Qt::ContextMenuPolicy"
            read: "contextMenuPolicy"
            write: "setContextMenuPolicy"
            index: 33
        }
        Property {
            name: "updatesEnabled"
            type: "bool"
            read: "updatesEnabled"
            write: "setUpdatesEnabled"
            index: 34
        }
        Property { name: "visible"; type: "bool"; read: "isVisible"; write: "setVisible"; index: 35 }
        Property { name: "minimized"; type: "bool"; read: "isMinimized"; index: 36; isReadonly: true }
        Property { name: "maximized"; type: "bool"; read: "isMaximized"; index: 37; isReadonly: true }
        Property { name: "fullScreen"; type: "bool"; read: "isFullScreen"; index: 38; isReadonly: true }
        Property { name: "sizeHint"; type: "QSize"; read: "sizeHint"; index: 39; isReadonly: true }
        Property {
            name: "minimumSizeHint"
            type: "QSize"
            read: "minimumSizeHint"
            index: 40
            isReadonly: true
        }
        Property {
            name: "acceptDrops"
            type: "bool"
            read: "acceptDrops"
            write: "setAcceptDrops"
            index: 41
        }
        Property {
            name: "windowTitle"
            type: "QString"
            read: "windowTitle"
            write: "setWindowTitle"
            notify: "windowTitleChanged"
            index: 42
        }
        Property {
            name: "windowIcon"
            type: "QIcon"
            read: "windowIcon"
            write: "setWindowIcon"
            notify: "windowIconChanged"
            index: 43
        }
        Property {
            name: "windowIconText"
            type: "QString"
            read: "windowIconText"
            write: "setWindowIconText"
            notify: "windowIconTextChanged"
            index: 44
        }
        Property {
            name: "windowOpacity"
            type: "double"
            read: "windowOpacity"
            write: "setWindowOpacity"
            index: 45
        }
        Property {
            name: "windowModified"
            type: "bool"
            read: "isWindowModified"
            write: "setWindowModified"
            index: 46
        }
        Property { name: "toolTip"; type: "QString"; read: "toolTip"; write: "setToolTip"; index: 47 }
        Property {
            name: "toolTipDuration"
            type: "int"
            read: "toolTipDuration"
            write: "setToolTipDuration"
            index: 48
        }
        Property { name: "statusTip"; type: "QString"; read: "statusTip"; write: "setStatusTip"; index: 49 }
        Property { name: "whatsThis"; type: "QString"; read: "whatsThis"; write: "setWhatsThis"; index: 50 }
        Property {
            name: "accessibleName"
            type: "QString"
            read: "accessibleName"
            write: "setAccessibleName"
            index: 51
        }
        Property {
            name: "accessibleDescription"
            type: "QString"
            read: "accessibleDescription"
            write: "setAccessibleDescription"
            index: 52
        }
        Property {
            name: "layoutDirection"
            type: "Qt::LayoutDirection"
            read: "layoutDirection"
            write: "setLayoutDirection"
            reset: "unsetLayoutDirection"
            index: 53
        }
        Property {
            name: "autoFillBackground"
            type: "bool"
            read: "autoFillBackground"
            write: "setAutoFillBackground"
            index: 54
        }
        Property {
            name: "styleSheet"
            type: "QString"
            read: "styleSheet"
            write: "setStyleSheet"
            index: 55
        }
        Property {
            name: "locale"
            type: "QLocale"
            read: "locale"
            write: "setLocale"
            reset: "unsetLocale"
            index: 56
        }
        Property {
            name: "windowFilePath"
            type: "QString"
            read: "windowFilePath"
            write: "setWindowFilePath"
            index: 57
        }
        Property {
            name: "inputMethodHints"
            type: "Qt::InputMethodHints"
            read: "inputMethodHints"
            write: "setInputMethodHints"
            index: 58
        }
        Signal {
            name: "windowTitleChanged"
            Parameter { name: "title"; type: "QString" }
        }
        Signal {
            name: "windowIconChanged"
            Parameter { name: "icon"; type: "QIcon" }
        }
        Signal {
            name: "windowIconTextChanged"
            Parameter { name: "iconText"; type: "QString" }
        }
        Signal {
            name: "customContextMenuRequested"
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method {
            name: "setEnabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setDisabled"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowModified"
            Parameter { type: "bool" }
        }
        Method {
            name: "setWindowTitle"
            Parameter { type: "QString" }
        }
        Method {
            name: "setStyleSheet"
            Parameter { name: "styleSheet"; type: "QString" }
        }
        Method { name: "setFocus" }
        Method { name: "update" }
        Method { name: "repaint" }
        Method {
            name: "setVisible"
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setHidden"
            Parameter { name: "hidden"; type: "bool" }
        }
        Method { name: "show" }
        Method { name: "hide" }
        Method { name: "showMinimized" }
        Method { name: "showMaximized" }
        Method { name: "showFullScreen" }
        Method { name: "showNormal" }
        Method { name: "close"; type: "bool" }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "updateMicroFocus"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
        }
        Method { name: "updateMicroFocus"; isCloned: true }
        Method { name: "_q_showIfNotHidden" }
        Method { name: "_q_closestWindowHandle"; type: "QWindow"; isPointer: true }
        Method {
            name: "grab"
            type: "QPixmap"
            Parameter { name: "rectangle"; type: "QRect" }
        }
        Method { name: "grab"; type: "QPixmap"; isCloned: true }
    }
}
